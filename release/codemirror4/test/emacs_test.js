//>>built
define("codemirror4/test/emacs_test",["dojo","dijit","dojox"],function(l,m,n){(function(){function h(a){if(f=k[f])return f;var b,c,d,f=a.replace(/\w+-/g,function(a){"Ctrl-"==a?b=!0:"Alt-"==a?d=!0:"Shift-"==a&&(c=!0);return""}),e,g;for(g in CodeMirror.keyNames)if(CodeMirror.keyNames[g]==f){e=g;break}if(null==g)throw Error("Unknown key: "+f);return k[a]={type:"keydown",keyCode:e,ctrlKey:b,shiftKey:c,altKey:d,preventDefault:function(){},stopPropagation:function(){}}}function b(a,b){var c=Array.prototype.slice.call(arguments,
2);testCM(a,function(a){for(var b=0;b<c.length;++b){var e=c[b];e instanceof d?a.setCursor(e):e.call?e(a):a.triggerOnKeyDown(h(e))}},{keyMap:"emacs",value:b,mode:"javascript"})}function a(a,b){return function(c){eqPos(c.getCursor(),d(a,b))}}function c(a){return function(b){eq(b.getValue(),a)}}var d=CodeMirror.Pos;namespace="emacs_";var k={};b("motionHSimple","abc","Ctrl-F","Ctrl-F","Ctrl-B",a(0,1));b("motionHMulti","abcde","Ctrl-4","Ctrl-F",a(0,4),"Ctrl--","Ctrl-2","Ctrl-F",a(0,2),"Ctrl-5","Ctrl-B",
a(0,0));b("motionHWord","abc. def ghi","Alt-F",a(0,3),"Alt-F",a(0,8),"Ctrl-B","Alt-B",a(0,5),"Alt-B",a(0,0));b("motionHWordMulti","abc. def ghi ","Ctrl-3","Alt-F",a(0,12),"Ctrl-2","Alt-B",a(0,5),"Ctrl--","Alt-B",a(0,8));b("motionVSimple","a\nb\nc\n","Ctrl-N","Ctrl-N","Ctrl-P",a(1,0));b("motionVMulti","a\nb\nc\nd\ne\n","Ctrl-2","Ctrl-N",a(2,0),"Ctrl-F","Ctrl--","Ctrl-N",a(1,1),"Ctrl--","Ctrl-3","Ctrl-P",a(4,1));b("killYank","abc\ndef\nghi","Ctrl-F","Ctrl-Space","Ctrl-N","Ctrl-N","Ctrl-W","Ctrl-E",
"Ctrl-Y",c("ahibc\ndef\ng"));b("killRing","abcdef","Ctrl-Space","Ctrl-F","Ctrl-W","Ctrl-Space","Ctrl-F","Ctrl-W","Ctrl-Y","Alt-Y",c("acdef"));b("copyYank","abcd","Ctrl-Space","Ctrl-E","Alt-W","Ctrl-Y",c("abcdabcd"));b("killLineSimple","foo\nbar","Ctrl-F","Ctrl-K",c("f\nbar"));b("killLineEmptyLine","foo\n  \nbar","Ctrl-N","Ctrl-K",c("foo\nbar"));b("killLineMulti","foo\nbar\nbaz","Ctrl-F","Ctrl-F","Ctrl-K","Ctrl-K","Ctrl-K","Ctrl-A","Ctrl-Y",c("o\nbarfo\nbaz"));b("moveByParagraph","abc\ndef\n\n\nhij\nklm\n\n",
"Ctrl-F","Ctrl-Down",a(2,0),"Ctrl-Down",a(6,0),"Ctrl-N","Ctrl-Up",a(3,0),"Ctrl-Up",a(0,0),d(1,2),"Ctrl-Down",a(2,0),d(4,2),"Ctrl-Up",a(3,0));b("moveByParagraphMulti","abc\n\ndef\n\nhij\n\nklm","Ctrl-U","2","Ctrl-Down",a(3,0),"Shift-Alt-.","Ctrl-3","Ctrl-Up",a(1,0));b("moveBySentence","sentence one! sentence\ntwo\n\nparagraph two","Alt-E",a(0,13),"Alt-E",a(1,3),"Ctrl-F","Alt-A",a(0,13));b("moveByExpr","function foo(a, b) {}","Ctrl-Alt-F",a(0,8),"Ctrl-Alt-F",a(0,12),"Ctrl-Alt-F",a(0,18),"Ctrl-Alt-B",
a(0,12),"Ctrl-Alt-B",a(0,9));b("moveByExprMulti","foo bar baz bug","Ctrl-2","Ctrl-Alt-F",a(0,7),"Ctrl--","Ctrl-Alt-F",a(0,4),"Ctrl--","Ctrl-2","Ctrl-Alt-B",a(0,11));b("delExpr","var x \x3d [\n  a,\n  b\n  c\n];",d(0,8),"Ctrl-Alt-K",c("var x \x3d ;"),"Ctrl-/",d(4,1),"Ctrl-Alt-Backspace",c("var x \x3d ;"));b("delExprMulti","foo bar baz","Ctrl-2","Ctrl-Alt-K",c(" baz"),"Ctrl-/","Ctrl-E","Ctrl-2","Ctrl-Alt-Backspace",c("foo "));b("justOneSpace","hi      bye  ",d(0,4),"Alt-Space",c("hi bye  "),d(0,4),
"Alt-Space",c("hi b ye  "),"Ctrl-A","Alt-Space","Ctrl-E","Alt-Space",c(" hi b ye "));b("openLine","foo bar","Alt-F","Ctrl-O",c("foo\n bar"));b("transposeChar","abcd\ne","Ctrl-F","Ctrl-T","Ctrl-T",c("bcad\ne"),a(0,3),"Ctrl-F","Ctrl-T","Ctrl-T","Ctrl-T",c("bcda\ne"),a(0,4),"Ctrl-F","Ctrl-T",c("bcde\na"),a(1,0));b("manipWordCase","foo BAR bAZ","Alt-C","Alt-L","Alt-U",c("Foo bar BAZ"),"Ctrl-A","Alt-U","Alt-L","Alt-C",c("FOO bar Baz"));b("manipWordCaseMulti","foo Bar bAz","Ctrl-2","Alt-U",c("FOO BAR bAz"),
"Ctrl-A","Ctrl-3","Alt-C",c("Foo Bar Baz"));b("upExpr","foo {\n  bar[];\n  baz(blah);\n}",d(2,7),"Ctrl-Alt-U",a(2,5),"Ctrl-Alt-U",a(0,4));b("transposeExpr","do foo[bar] dah",d(0,6),"Ctrl-Alt-T",c("do [bar]foo dah"));b("clearMark","abcde",d(0,2),"Ctrl-Space","Ctrl-F","Ctrl-F","Ctrl-G","Ctrl-W",c("abcde"));testCM("save",function(a){var b=!1;CodeMirror.commands.save=function(a){b=a.getValue()};a.triggerOnKeyDown(h("Ctrl-X"));a.triggerOnKeyDown(h("Ctrl-S"));is(b,"hi")},{value:"hi",keyMap:"emacs"})})()});
//# sourceMappingURL=emacs_test.js.map