//>>built
define("codemirror4/mode/xquery/test",["dojo","dijit","dojox"],function(c,d,e){(function(){function a(a){test.mode(a,b,Array.prototype.slice.call(arguments,1))}var b=CodeMirror.getMode({tabSize:4},"xquery");a("eviltest",'[keyword xquery] [keyword version] [variable \x26quot;1][keyword .][atom 0][keyword -][variable ml\x26quot;][def\x26variable ;]      [comment (: this is       : a          "comment" :)]',"      [keyword let] [variable $let] [keyword :\x3d] [variable \x26lt;x] [variable attr][keyword \x3d][variable \x26quot;value\x26quot;\x26gt;\x26quot;test\x26quot;\x26lt;func\x26gt][def\x26variable ;function]() [variable $var] {[keyword function]()} {[variable $var]}[variable \x26lt;][keyword /][variable func\x26gt;\x26lt;][keyword /][variable x\x26gt;]",
"      [keyword let] [variable $joe][keyword :\x3d][atom 1]","      [keyword return] [keyword element] [variable element] {","          [keyword attribute] [variable attribute] { [atom 1] },","          [keyword element] [variable test] { [variable \x26#39;a\x26#39;] },           [keyword attribute] [variable foo] { [variable \x26quot;bar\x26quot;] },","          [def\x26variable fn:doc]()[[ [variable foo][keyword /][variable @bar] [keyword eq] [variable $let] ]],","          [keyword //][variable x] }                 [comment (: a more 'evil' test :)]",
"      [comment (: Modified Blakeley example (: with nested comment :) ... :)]","      [keyword declare] [keyword private] [keyword function] [def\x26variable local:declare]() {()}[variable ;]","      [keyword declare] [keyword private] [keyword function] [def\x26variable local:private]() {()}[variable ;]","      [keyword declare] [keyword private] [keyword function] [def\x26variable local:function]() {()}[variable ;]","      [keyword declare] [keyword private] [keyword function] [def\x26variable local:local]() {()}[variable ;]",
"      [keyword let] [variable $let] [keyword :\x3d] [variable \x26lt;let\x26gt;let] [variable $let] [keyword :\x3d] [variable \x26quot;let\x26quot;\x26lt;][keyword /let][variable \x26gt;]","      [keyword return] [keyword element] [variable element] {","          [keyword attribute] [variable attribute] { [keyword try] { [def\x26variable xdmp:version]() } [keyword catch]([variable $e]) { [def\x26variable xdmp:log]([variable $e]) } },","          [keyword attribute] [variable fn:doc] { [variable \x26quot;bar\x26quot;] [variable castable] [keyword as] [atom xs:string] },",
"          [keyword element] [variable text] { [keyword text] { [variable \x26quot;text\x26quot;] } },","          [def\x26variable fn:doc]()[[ [qualifier child::][variable eq][keyword /]([variable @bar] [keyword |] [qualifier attribute::][variable attribute]) [keyword eq] [variable $let] ]],","          [keyword //][variable fn:doc]","      }");a("testEmptySequenceKeyword",'[string "foo"] [keyword instance] [keyword of] [keyword empty-sequence]()');a("testMultiAttr",'[tag \x3cp ][attribute a1]\x3d[string "foo"] [attribute a2]\x3d[string "bar"][tag \x3e][variable hello] [variable world][tag \x3c/p\x3e]');
a("test namespaced variable",'[keyword declare] [keyword namespace] [variable e] [keyword \x3d] [string "http://example.com/ANamespace"][variable ;declare] [keyword variable] [variable $e:exampleComThisVarIsNotRecognized] [keyword as] [keyword element]([keyword *]) [variable external;]');a("test EQName variable",'[keyword declare] [keyword variable] [variable $"http://www.example.com/ns/my":var] [keyword :\x3d] [atom 12][variable ;]','[tag \x3cout\x3e]{[variable $"http://www.example.com/ns/my":var]}[tag \x3c/out\x3e]');
a("test EQName function",'[keyword declare] [keyword function] [def\x26variable "http://www.example.com/ns/my":fn] ([variable $a] [keyword as] [atom xs:integer]) [keyword as] [atom xs:integer] {',"   [variable $a] [keyword +] [atom 2]","}[variable ;]",'[tag \x3cout\x3e]{[def\x26variable "http://www.example.com/ns/my":fn]([atom 12])}[tag \x3c/out\x3e]');a("test EQName function with single quotes","[keyword declare] [keyword function] [def\x26variable 'http://www.example.com/ns/my':fn] ([variable $a] [keyword as] [atom xs:integer]) [keyword as] [atom xs:integer] {",
"   [variable $a] [keyword +] [atom 2]","}[variable ;]","[tag \x3cout\x3e]{[def\x26variable 'http://www.example.com/ns/my':fn]([atom 12])}[tag \x3c/out\x3e]");a("testProcessingInstructions","[def\x26variable data]([comment\x26meta \x3c?target content?\x3e]) [keyword instance] [keyword of] [atom xs:string]");a("testQuoteEscapeDouble",'[keyword let] [variable $rootfolder] [keyword :\x3d] [string "c:\\builds\\winnt\\HEAD\\qa\\scripts\\"]','[keyword let] [variable $keysfolder] [keyword :\x3d] [def\x26variable concat]([variable $rootfolder], [string "keys\\"])')})()});
//# sourceMappingURL=test.js.map